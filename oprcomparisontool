<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Team OPR Comparison</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        h1 {
            color: #333;
            text-align: center;
        }
        .controls {
            display: flex;
            gap: 20px;
            margin-bottom: 20px;
            flex-wrap: wrap;
            align-items: flex-end;
        }
        .control-group {
            flex: 1;
            min-width: 200px;
        }
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
        }
        select, input, button {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
        }
        button {
            background-color: #0066cc;
            color: white;
            cursor: pointer;
            border: none;
            font-weight: bold;
        }
        button:hover {
            background-color: #0055bb;
        }
        #comparison-container {
            margin-top: 30px;
        }
        .loading {
            text-align: center;
            padding: 20px;
            font-style: italic;
            color: #666;
        }
        .chart-container {
            position: relative;
            height: 400px;
            margin: 20px 0;
        }
        .team-row {
            display: flex;
            margin-bottom: 10px;
            align-items: center;
        }
        .team-rank {
            width: 40px;
            font-weight: bold;
            text-align: center;
        }
        .team-number {
            width: 80px;
            font-weight: bold;
        }
        .team-name {
            flex: 1;
        }
        .team-opr {
            width: 80px;
            text-align: right;
            font-weight: bold;
        }
        .opr-bar-container {
            flex: 2;
            background-color: #eee;
            height: 20px;
            margin: 0 20px;
            border-radius: 10px;
            overflow: hidden;
        }
        .opr-bar {
            height: 100%;
            background-color: #4CAF50;
            border-radius: 10px;
        }
        .highlighted {
            background-color: #f0f7ff;
            border-radius: 5px;
            padding: 5px;
        }
        .team-list {
            max-height: 600px;
            overflow-y: auto;
            padding: 10px;
            border: 1px solid #eee;
            border-radius: 5px;
        }
        .stats-container {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            margin-bottom: 20px;
        }
        .stat-card {
            flex: 1;
            min-width: 200px;
            background-color: #f9f9f9;
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            text-align: center;
        }
        .stat-value {
            font-size: 24px;
            font-weight: bold;
            color: #0066cc;
            margin: 10px 0;
        }
        .stat-label {
            font-size: 14px;
            color: #666;
        }
        .error-message {
            color: #d9534f;
            padding: 10px;
            background-color: #ffeeee;
            border-radius: 5px;
            margin: 10px 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Team OPR Comparison</h1>
        
        <div class="controls">
            <div class="control-group">
                <label for="season">Season:</label>
                <select id="season">
                    <option value="2025">2025 (INTO THEE DEEP)</option>
                    <option value="2024" selected>2024 (CENTERSTAGE)</option>
                    <option value="2023">2023 (POWERPLAY)</option>
                    <option value="2022">2022 (FREIGHT FRENZY)</option>
                </select>
            </div>
            <div class="control-group">
                <label for="region">Region:</label>
                <select id="region">
                    <option value="">All Regions</option>
                    <option value="FIRST_IN_MICHIGAN">FIRST in Michigan</option>
                    <option value="FIRST_CHESAPEAKE">FIRST Chesapeake</option>
                    <option value="FIRST_NORTH_CAROLINA">FIRST North Carolina</option>
                    <option value="FIRST_WASHINGTON">FIRST Washington</option>
                    <option value="FIRST_IN_TEXAS">FIRST in Texas</option>
                    <option value="FIRST_MID_ATLANTIC">FIRST Mid-Atlantic</option>
                    <option value="FIRST_INDIANA">FIRST Indiana</option>
                    <option value="FIRST_ISRAEL">FIRST Israel</option>
                </select>
            </div>
            <div class="control-group">
                <label for="event-code">Event Code (optional):</label>
                <input type="text" id="event-code" placeholder="e.g., USMNC">
            </div>
            <div class="control-group">
                <button id="compare-btn">Compare Teams</button>
            </div>
        </div>
        
        <div id="comparison-container">
            <p>Select options above and click "Compare Teams" to see how Team 5356 ranks against other teams.</p>
        </div>
    </div>

    <script>
        // Constants
        const MY_TEAM_NUMBER = 5356;
        const API_BASE_URL = 'https://api.ftcscout.org/rest/v1';
        
        // Elements
        const seasonSelect = document.getElementById('season');
        const regionSelect = document.getElementById('region');
        const eventCodeInput = document.getElementById('event-code');
        const compareBtn = document.getElementById('compare-btn');
        const comparisonContainer = document.getElementById('comparison-container');
        
        // Event listeners
        compareBtn.addEventListener('click', compareTeams);
        
        // Main comparison function
        async function compareTeams() {
            const season = seasonSelect.value;
            const region = regionSelect.value;
            const eventCode = eventCodeInput.value.trim();
            
            showLoading();
            
            try {
                // First, check if our team exists
                const myTeam = await fetchTeam(MY_TEAM_NUMBER);
                
                if (!myTeam) {
                    showError(`Team ${MY_TEAM_NUMBER} not found.`);
                    return;
                }
                
                // Get the teams to compare against
                let teams = [];
                let eventName = "";
                
                if (eventCode) {
                    // If event code is provided, get teams from that event
                    const eventData = await fetchEvent(season, eventCode);
                    if (!eventData) {
                        showError(`Event with code ${eventCode} not found for season ${season}.`);
                        return;
                    }
                    
                    eventName = eventData.name;
                    const eventTeams = await fetchEventTeams(season, eventCode);
                    
                    if (!eventTeams || eventTeams.length === 0) {
                        showError(`No teams found for event ${eventCode} in season ${season}.`);
                        return;
                    }
                    
                    teams = eventTeams;
                } else {
                    // TODO: In a real app, we would need to paginate and handle a large number of teams
                    // For this demo, we'll just fetch a limited set
                    const searchTeams = await fetchTeamSearch(region, 500);
                    
                    if (!searchTeams || searchTeams.length === 0) {
                        showError(`No teams found for the selected criteria.`);
                        return;
                    }
                    
                    teams = searchTeams;
                }
                
                // Fetch OPR stats for each team
                const teamsWithStats = await Promise.all(
                    teams.map(async (team) => {
                        try {
                            const stats = await fetchTeamQuickStats(team.number, season, region);
                            return {
                                ...team,
                                stats: stats
                            };
                        } catch (error) {
                            // If we can't get stats for a team, still include it but with no stats
                            return {
                                ...team,
                                stats: null
                            };
                        }
                    })
                );
                
                // Filter teams that have valid OPR stats
                const teamsWithOPR = teamsWithStats.filter(team => 
                    team.stats && team.stats.opr !== null && !isNaN(team.stats.opr)
                );
                
                if (teamsWithOPR.length === 0) {
                    showError(`No teams found with OPR data for the selected criteria.`);
                    return;
                }
                
                // Sort teams by OPR (highest first)
                teamsWithOPR.sort((a, b) => b.stats.opr - a.stats.opr);
                
                // Find our team in the sorted list
                const myTeamWithStats = teamsWithOPR.find(team => team.number === MY_TEAM_NUMBER);
                
                // If our team isn't in the list or doesn't have stats, show an error
                if (!myTeamWithStats) {
                    showError(`Team ${MY_TEAM_NUMBER} does not have OPR data for the selected criteria.`);
                    return;
                }
                
                // Calculate the team's rank
                const myTeamRank = teamsWithOPR.findIndex(team => team.number === MY_TEAM_NUMBER) + 1;
                const totalTeams = teamsWithOPR.length;
                const percentileRank = ((totalTeams - myTeamRank) / totalTeams * 100).toFixed(1);
                
                // Find max OPR for scaling
                const maxOPR = Math.max(...teamsWithOPR.map(team => team.stats.opr));
                
                // Render the comparison
                renderComparison(teamsWithOPR, myTeamWithStats, myTeamRank, totalTeams, maxOPR, eventName, percentileRank);
            } catch (error) {
                showError(`Error fetching data: ${error.message}`);
                console.error(error);
            }
        }
        
        // Fetch functions
        async function fetchTeam(teamNumber) {
            try {
                const response = await fetch(`${API_BASE_URL}/teams/${teamNumber}`);
                if (response.status === 404) {
                    return null;
                }
                return await response.json();
            } catch (error) {
                console.error(`Error fetching team ${teamNumber}:`, error);
                return null;
            }
        }
        
        async function fetchEvent(season, eventCode) {
            try {
                const response = await fetch(`${API_BASE_URL}/events/${season}/${eventCode}`);
                if (response.status === 404) {
                    return null;
                }
                return await response.json();
            } catch (error) {
                console.error(`Error fetching event ${eventCode}:`, error);
                return null;
            }
        }
        
        async function fetchEventTeams(season, eventCode) {
            try {
                const response = await fetch(`${API_BASE_URL}/events/${season}/${eventCode}/teams`);
                return await response.json();
            } catch (error) {
                console.error(`Error fetching teams for event ${eventCode}:`, error);
                return [];
            }
        }
        
        async function fetchTeamSearch(region, limit = 100) {
            try {
                let url = `${API_BASE_URL}/teams/search?limit=${limit}`;
                if (region) {
                    url += `&region=${region}`;
                }
                const response = await fetch(url);
                return await response.json();
            } catch (error) {
                console.error('Error searching teams:', error);
                return [];
            }
        }
        
        async function fetchTeamQuickStats(teamNumber, season, region) {
            try {
                let url = `${API_BASE_URL}/teams/${teamNumber}/quick-stats?season=${season}`;
                if (region) {
                    url += `&region=${region}`;
                }
                const response = await fetch(url);
                if (response.status === 404) {
                    return null;
                }
                return await response.json();
            } catch (error) {
                console.error(`Error fetching stats for team ${teamNumber}:`, error);
                return null;
            }
        }
        
        // UI functions
        function showLoading() {
            comparisonContainer.innerHTML = '<div class="loading">Loading comparison data...</div>';
        }
        
        function showError(message) {
            comparisonContainer.innerHTML = `<div class="error-message">${message}</div>`;
        }
        
        function renderComparison(teams, myTeam, myTeamRank, totalTeams, maxOPR, eventName, percentileRank) {
            const season = seasonSelect.value;
            const title = eventName 
                ? `OPR Rankings for ${eventName} (${season})`
                : `OPR Rankings for ${season} Season`;
            
            const myTeamOPR = myTeam.stats.opr.toFixed(2);
            
            let html = `
                <h2>${title}</h2>
                
                <div class="stats-container">
                    <div class="stat-card">
                        <div class="stat-label">Team 5356 Rank</div>
                        <div class="stat-value">${myTeamRank} of ${totalTeams}</div>
                        <div>Top ${percentileRank}%</div>
                    </div>
                    
                    <div class="stat-card">
                        <div class="stat-label">Team 5356 OPR</div>
                        <div class="stat-value">${myTeamOPR}</div>
                        <div>Offensive Power Rating</div>
                    </div>
                    
                    <div class="stat-card">
                        <div class="stat-label">Top OPR</div>
                        <div class="stat-value">${teams[0].stats.opr.toFixed(2)}</div>
                        <div>Team ${teams[0].number}</div>
                    </div>
                    
                    <div class="stat-card">
                        <div class="stat-label">Average OPR</div>
                        <div class="stat-value">${calculateAverageOPR(teams).toFixed(2)}</div>
                        <div>All Teams</div>
                    </div>
                </div>
                
                <h3>Team Rankings</h3>
                <div class="team-list">
            `;
            
            // Add team rows
            teams.forEach((team, index) => {
                const rank = index + 1;
                const isMyTeam = team.number === MY_TEAM_NUMBER;
                const oprValue = team.stats.opr.toFixed(2);
                const barWidth = (team.stats.opr / maxOPR * 100).toFixed(2);
                
                html += `
                    <div class="team-row ${isMyTeam ? 'highlighted' : ''}">
                        <div class="team-rank">${rank}</div>
                        <div class="team-number">${team.number}</div>
                        <div class="team-name">${team.name || 'Unknown'}</div>
                        <div class="opr-bar-container">
                            <div class="opr-bar" style="width: ${barWidth}%"></div>
                        </div>
                        <div class="team-opr">${oprValue}</div>
                    </div>
                `;
            });
            
            html += `
                </div>
                <p style="margin-top: 20px; font-size: 14px; color: #666;">
                    Data source: FTC Scout API - Comparing ${teams.length} teams with valid OPR data
                </p>
            `;
            
            comparisonContainer.innerHTML = html;
        }
        
        function calculateAverageOPR(teams) {
            const total = teams.reduce((sum, team) => sum + team.stats.opr, 0);
            return total / teams.length;
        }
    </script>
</body>
</html>
